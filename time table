#include<iostream>
#include<fstream>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>

/*
To do next:
make constants for array size,etc (i can do this if you want)
add constructors 
add write to file, read from file for each class -static function (for entire array)
combine with school version
*/

/*
To do later:
use pointers
use data structures
robustness
add comments, menus
capatilization/grammar
*/

/*
stuff to check before running:
i and j are not interchanged
only paramenterized constructor and read from file functions should increment no_labs,no_subjs,etc
make sure constants are used where ever reqd
make sure all counters are used where ever reqd
*/

/*
future improvements / bonus features / features which we may not be able to include
diff batches -commerce,comp,bio
paired subjs -comp/bio
special allocation of class teacher periods, and extra curriculars before lunch
rejection of table based on standard deviation
*/

using namespace std;

class lab
{	
	public:
	static int no_labs;
	
	char name[20];
	int capacity, day[6][10];	
}labs[5];

	void lab::newlab()
	{
		no_labs++;
		
		cout<<"Enter:\n";
		cout<<"Name of Infrastructure: ";
		gets(name);
		cout<<"Capacity: ";
		cin>>capacity;
	}

class subject
{
	public:
	static int no_subjs;
	
	char name[20];
	
	int type, no_doubles, pairing_id;	
	int class_list[15], no_classes;
	int infra_reqd[5];

	
}subjs[50];
int subjext::no_subjs=0;

	void subject::newsubject()
	{
		int i=0,temp;
		char ch;
		
		no_subjs++;
		
		cout<<"Enter:\n";
		cout<<"Name of subject: ";
		cin>>name;
		cout<<"Type of subject:\n";
		cout<<"1.Academic\n2.Extra-curricular\n";
		cin>>type;
		cout<<"List of classes\n(continue entering, when done enter 0)\n";
			for(i=0;i<15;i++)
			{
				cin>>temp;
				if(temp==0)
				break;
				class_list[i]=temp;
			}
			no_classes=i;
			
		cout<<"Infra structure required? (y/n)\n"
			for(i=0;i<lab::no_labs;i++)
			{
				cout<<labs[i].name;//based on existing labs
				cin>>ch;
				ch=tolower(ch);
				if(ch=='y')
				infra_reqd[i]=1;
				else
				infra_reqd[i]=0;				
			}
		cout<<"No of double periods per week: ";
		cin>>no_doubles;
		cout<<"Pairing ID:\n(enter 0 if not required)\n";
		cin>>pairing_id;
	}

class grade
{
	public:
	static int no_grades;
	
	int number,no_sections, day[6][10];
	
	Subject subj_list[15];
	int no_per_week[15];	
}grades[20];
int grade::no_grades=0;

	void grade::newgrade()
	{
		int i,j,k=0,status;
		
		no_grades++;
		
		cout<<"Enter:\n";
		cout<<"Class number: ";
		cin>>number;
		cout<<"Number of sections required: ";
		cin>>no_sections;
		cout<<"No of period per week:\n";
			for(i=0;i<subject::no_subjs;i++)
			{
				for(j=0;j<subjs[i].no_classes;j++)
				{
					if(subjs[i].class_list[j]==number)//based on existing subjects
					{
						cout<<subjs[i].name<<": ";
						subj_list[k]=subjs[i];//add to list
						cin>>no_per_week[k];
					}
				}							
			}
	}
	
class teacher
{
	public:
	static int no_teachers;
	
	char name[20];
	int no_periods_per_week, day[6][10];
	grade myclass;
	
	grade class_list[15];
	subject subj_list[15];
};
int teacher::no_teachers=0;

	void teacher::newteacher()
	{
			int i,j,k=0,temp;
			char ch;
			
			no_teachers++;
			
			cout<<"Enter:\n";
			cout<<"Name of teacher: ";
			gets(name);
			cout<<"class teacher's class number: ";//need to rephrase  
			cin>>temp;
				for(i=0;i<grade::no_grades;i++)
				{
					if(grades[i].number==temp)
					myclass=grades[i];
				}
			cout<<"No of periods per day: ";
			cin>>no_periods_per_week;
			cout<<"Subjects to be taught? (y,n):\n";
				for(i=0;i<subject::no_subjs;i++)//based on existing subject
				{
					cout<<subjs[i].name<<": ";
					cin>>ch;
					ch=tolower(ch);
					if(ch=='n')
					continue;
					
					cout<<"Classes to be taught? (y/n)";
					for(j=0;j<subjs[i].no_classes;j++)//grades of chosen subject
					{
						cout<<subjs[i].class_list[j]<<": ";
						cin>>ch;
						ch=tolower(ch);
						if(ch=='y')//add to list
						{
							subj_list[k]=subjs[i];
							class_list[k]=subjs[i].class_list[j];
						}
					}					
				}			
	}
class allocate
{
/*
call functions for input
make the time table
print according to teacher
print according to class +section 
call functions for file management
*/
};
